{
  "version": 3,
  "sources": ["../plugin/core/core.mts", "../plugin/core/bs.3.mts", "../main.mts"],
  "sourcesContent": ["type WidgetElement = HTMLElement | HTMLInputElement | HTMLSelectElement | HTMLCanvasElement;\ntype CEvent = [string, EventListenerOrEventListenerObject];\n\nclass Widget {\n  obj: string;\n  control: WidgetElement;\n  body: HTMLElement\n  widgets: Widget[]\n  events_list: CEvent[]\n\n  public constructor(element: string) {\n    this.obj = element;\n    this.control = document.createElement(element);\n    this.body = document.body;\n    this.widgets = [];\n    this.events_list = [];\n  }\n\n  public HasClass(className: string): boolean {\n    const clist = this.control.classList;\n    for (const item of clist) {\n      if (item == className) {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  public Clear(): void {\n    // this only clear the next \n    // this function use for deep clear the items\n    for (const item of this.widgets) {\n      item.Delete();\n    }\n    this.widgets.length = 0;\n  }\n\n  public Dispose(): void {\n\n  }\n\n\n  public Delete(): void {\n    this.Clear(); // clear first the leaves\n    this.RemoveEvents(); // remove the current events\n    this.Dispose(); // diposal \n    this.control.remove(); // this is the final\n  }\n\n\n  public AddStyle(styles: { [index: string]: string } | string, value = ''): Widget {\n    if (typeof (styles) == 'object') {\n\n      for (const item in styles) {\n        //this.control.style[item] = styles[item];\n        this.control.style.setProperty(item, styles[item]);\n      }\n    } else if (typeof (styles) == 'string') {\n      this.control.style.setProperty(styles, value);\n    }\n    return this;\n  }\n  \n  public AddClass(cs: string | string[]): Widget {\n    if (typeof (cs) == 'string') {\n      this.control.classList.add(cs);\n    } else if (cs instanceof Array) {\n      for (const item of cs) {\n        if (typeof (item) == 'string') {\n          this.control.classList.add(item);\n        }\n      }\n    }\n    return this;\n  }\n  public DeleteClass(cs: string | string[]): Widget {\n    if (typeof (cs) == 'string') {\n      this.control.classList.remove(cs);\n    } else if (cs instanceof Array) {\n      for (const item of cs) {\n        if (typeof (item) == 'string') {\n          this.control.classList.remove(item);\n        }\n      }\n    }\n    return this;\n  }\n\n\n  public DeleteAttr(name: string | string[]) {\n    if (typeof (name) == \"string\") {\n      this.control.removeAttribute(name);\n    } else if (name instanceof Array) {\n      for (const item of name) {\n        this.control.removeAttribute(item);\n      }\n    }\n\n    return this;\n  }\n\n  public AddAttr(attrs: { [index: string]: string }, value: string = ''): Widget {\n    if (typeof (attrs) == 'object') {\n      for (const item in attrs) {\n        this.control.setAttribute(item, attrs[item]);\n      }\n    } else if (typeof (attrs) == 'string') {\n      this.control.setAttribute(attrs, value);\n    }\n    return this;\n  }\n  public GetAttr(key: string): string | null {\n    return this.control.getAttribute(key);\n  }\n  public AddValue(v: string|boolean): Widget {\n    if (this.control instanceof HTMLInputElement || this.control instanceof HTMLSelectElement) {\n      if (typeof(v) == 'string') {\n        this.control.value = v;\n      } else if (this.control.type == 'radio' || this.control.type == 'checkbox'){\n        this.control.checked = v;\n      }\n    }\n    return this;\n  }\n  public GetValue(): string|boolean {\n    //return this.control.value;\n    if (this.control instanceof HTMLInputElement || this.control instanceof HTMLSelectElement) {\n      if (typeof(this.control.value) == 'string') {\n        return this.control.value;\n      } else if (this.control.type == 'radio' || this.control.type == 'checkbox'){\n        return this.control.checked;\n      }\n    } else if (this.control instanceof HTMLTextAreaElement) {\n      return this.control.value;\n    }\n    return false;\n  }\n  protected __Escape(text: string): string {\n    \n    const htmlEntities: Record<string, string> = {\n      \"&\": \"&amp;\",\n      \"<\": \"&lt;\",\n      \">\": \"&gt;\",\n      '\"': \"&quot;\",\n      \"'\": \"&#039;\"\n    };\n\n    return text.replace(/[&<>\"']/g, function (match) {\n      return htmlEntities[match];\n    });\n    \n  }\n \n  public Html(html: string | null = null): string | Widget {\n    if (html != null) {\n\n      this.control.innerHTML = html;\n\n      return this;\n    }\n    return this.control.innerHTML;;\n  }\n  public Text(text: string | null = null): string | Widget {\n    if (text != null) {\n      this.control.innerHTML = this.__Escape(text);\n      return this;\n    }\n    return this.control.innerText;\n  }\n  public Show(): Widget {\n    this.control.style.display = '';\n    \n    return this;\n  }\n  public Hide(): Widget {\n    this.control.style.display = 'none';\n    return this;\n  }\n  \n  public Add(widget: Widget | Widget[]): Widget {\n    if (widget instanceof Widget) {\n      this.widgets.push(widget);\n      this.control.appendChild(widget.control);\n    } else if (widget instanceof Array) {\n      for (const item of widget) {\n        if (item instanceof Widget) {\n          this.widgets.push(item);\n          this.control.appendChild(item.control);\n        }\n      }\n    }\n    return this;\n  }\n\n  public Prepend(widget: Widget | Widget[]): Widget {\n    if (widget instanceof Widget) {\n      this.widgets.push(widget);\n      this.control.prepend(widget.control);\n    } else if (widget instanceof Array) {\n      for (const item of widget) {\n        if (item instanceof Widget) {\n          this.widgets.push(item);\n          this.control.prepend(item.control);\n        }\n      }\n    }\n    return this;\n  }\n\n  public AddEventListener(evt: string, fn: EventListenerOrEventListenerObject): Widget {\n    this.control.addEventListener(evt, fn);\n\n    //this.events_list.push(Ceven [evt, fn]);\n    this.events_list.push([evt, fn])\n    return this;\n  }\n\n  private RemoveEvents(): Widget {\n    for (const item of this.events_list) {\n      console.log(`Clean up: ${item[0]} - ${item[1]}`);\n      this.control.removeEventListener(item[0], item[1]);\n    }\n    //this.events_list = [];\n    this.events_list.length = 0;\n    return this;\n  }\n\n}\nclass html extends Widget { constructor() { super(\"html\"); } }\nclass head extends Widget { constructor() { super(\"head\"); } }\nclass body extends Widget { constructor() { super(\"body\"); } }\nclass title extends Widget { constructor() { super(\"title\"); } }\nclass base extends Widget { constructor() { super(\"base\"); } }\nclass link extends Widget { constructor() { super(\"link\"); } }\nclass meta extends Widget { constructor() { super(\"meta\"); } }\nclass style extends Widget { constructor() { super(\"style\"); } }\nclass script extends Widget { constructor() { super(\"script\"); } }\nclass noscript extends Widget { constructor() { super(\"noscript\"); } }\nclass template extends Widget { constructor() { super(\"template\"); } }\nclass section extends Widget { constructor() { super(\"section\"); } }\nclass nav extends Widget { constructor() { super(\"nav\"); } }\nclass article extends Widget { constructor() { super(\"article\"); } }\nclass aside extends Widget { constructor() { super(\"aside\"); } }\nclass h1 extends Widget { constructor() { super(\"h1\"); } }\nclass h2 extends Widget { constructor() { super(\"h2\"); } }\nclass h3 extends Widget { constructor() { super(\"h3\"); } }\nclass h4 extends Widget { constructor() { super(\"h4\"); } }\nclass h5 extends Widget { constructor() { super(\"h5\"); } }\nclass h6 extends Widget { constructor() { super(\"h6\"); } }\nclass header extends Widget { constructor() { super(\"header\"); } }\nclass footer extends Widget { constructor() { super(\"footer\"); } }\nclass address extends Widget { constructor() { super(\"address\"); } }\nclass p extends Widget { constructor() { super(\"p\"); } }\nclass hr extends Widget { constructor() { super(\"hr\"); } }\nclass pre extends Widget { constructor() { super(\"pre\"); } }\nclass blockquote extends Widget { constructor() { super(\"blockquote\"); } }\nclass ol extends Widget { constructor() { super(\"ol\"); } }\nclass ul extends Widget { constructor() { super(\"ul\"); } }\nclass li extends Widget { constructor() { super(\"li\"); } }\nclass dl extends Widget { constructor() { super(\"dl\"); } }\nclass dt extends Widget { constructor() { super(\"dt\"); } }\nclass dd extends Widget { constructor() { super(\"dd\"); } }\nclass figure extends Widget { constructor() { super(\"figure\"); } }\nclass figcaption extends Widget { constructor() { super(\"figcaption\"); } }\nclass main extends Widget { constructor() { super(\"main\"); } }\nclass div extends Widget { constructor() { super(\"div\"); } }\nclass a extends Widget { constructor() { super(\"a\"); } }\nclass em extends Widget { constructor() { super(\"em\"); } }\nclass strong extends Widget { constructor() { super(\"strong\"); } }\nclass small extends Widget { constructor() { super(\"small\"); } }\nclass s extends Widget { constructor() { super(\"s\"); } }\nclass cite extends Widget { constructor() { super(\"cite\"); } }\nclass q extends Widget { constructor() { super(\"q\"); } }\nclass dfn extends Widget { constructor() { super(\"dfn\"); } }\nclass abbr extends Widget { constructor() { super(\"abbr\"); } }\nclass ruby extends Widget { constructor() { super(\"ruby\"); } }\nclass rt extends Widget { constructor() { super(\"rt\"); } }\nclass rp extends Widget { constructor() { super(\"rp\"); } }\nclass b extends Widget { constructor() { super(\"b\"); } }\nclass i extends Widget { constructor() { super(\"i\"); } }\nclass u extends Widget { constructor() { super(\"u\"); } }\nclass mark extends Widget { constructor() { super(\"mark\"); } }\nclass bdi extends Widget { constructor() { super(\"bdi\"); } }\nclass bdo extends Widget { constructor() { super(\"bdo\"); } }\nclass span extends Widget { constructor() { super(\"span\"); } }\nclass br extends Widget { constructor() { super(\"br\"); } }\nclass wbr extends Widget { constructor() { super(\"wbr\"); } }\nclass ins extends Widget { constructor() { super(\"ins\"); } }\nclass del extends Widget { constructor() { super(\"del\"); } }\nclass img extends Widget { constructor() { super(\"img\"); } }\nclass iframe extends Widget { constructor() { super(\"iframe\"); } }\nclass embed extends Widget { constructor() { super(\"embed\"); } }\nclass param extends Widget { constructor() { super(\"param\"); } }\nclass video extends Widget { constructor() { super(\"video\"); } }\nclass audio extends Widget { constructor() { super(\"audio\"); } }\nclass source extends Widget { constructor() { super(\"source\"); } }\nclass track extends Widget { constructor() { super(\"track\"); } }\nclass canvas extends Widget { constructor() { super(\"canvas\"); } }\nclass map extends Widget { constructor() { super(\"map\"); } }\nclass area extends Widget { constructor() { super(\"area\"); } }\nclass svg extends Widget { constructor() { super(\"svg\"); } }\nclass math extends Widget { constructor() { super(\"math\"); } }\nclass table extends Widget { constructor() { super(\"table\"); } }\nclass caption extends Widget { constructor() { super(\"caption\"); } }\nclass colgroup extends Widget { constructor() { super(\"colgroup\"); } }\nclass col extends Widget { constructor() { super(\"col\"); } }\nclass tbody extends Widget { constructor() { super(\"tbody\"); } }\nclass thead extends Widget { constructor() { super(\"thead\"); } }\nclass tfoot extends Widget { constructor() { super(\"tfoot\"); } }\nclass tr extends Widget { constructor() { super(\"tr\"); } }\nclass td extends Widget { constructor() { super(\"td\"); } }\nclass th extends Widget { constructor() { super(\"th\"); } }\nclass form extends Widget { constructor() { super(\"form\"); } }\nclass label extends Widget { constructor() { super(\"label\"); } }\nclass input extends Widget { constructor() { super(\"input\"); } }\nclass button extends Widget { constructor() { super(\"button\"); } }\nclass select extends Widget { constructor() { super(\"select\"); } }\nclass datalist extends Widget { constructor() { super(\"datalist\"); } }\nclass optgroup extends Widget { constructor() { super(\"optgroup\"); } }\nclass option extends Widget { constructor() { super(\"option\"); } }\nclass textarea extends Widget { constructor() { super(\"textarea\"); } }\nclass fieldset extends Widget { constructor() { super(\"fieldset\"); } }\nclass legend extends Widget { constructor() { super(\"legend\"); } }\nclass progress extends Widget { constructor() { super(\"progress\"); } }\nclass meter extends Widget { constructor() { super(\"meter\"); } }\nclass output extends Widget { constructor() { super(\"output\"); } }\nclass details extends Widget { constructor() { super(\"details\"); } }\nclass summary extends Widget { constructor() { super(\"summary\"); } }\nclass dialog extends Widget { constructor() { super(\"dialog\"); } }\nclass center extends Widget { constructor() { super(\"center\"); } }\n\n\n\nclass Window extends Widget {\n  static obj: Window\n  constructor(param: {\n    app: string | null,\n    title: string | null,\n    width: string | null,\n    height: string | null\n  } | null = null) {\n    super('div');\n    if (typeof(Window.obj) == 'undefined') {\n      this.AddStyle({\n        width: '100%',\n        height: '100%',\n        position: 'relative'\n      });\n      if (typeof (param) == 'object') {\n        //const { app = null, title = '', width = null, height = null } = param;\n      }\n      this.Hide();\n      this.body.appendChild(this.control);\n      Window.obj = this;\n    }\n  }\n  public Navigate(obj: Widget | Widget[]) {\n    Window.obj.Clear();\n    Window.obj.Add(obj);\n    return this;\n  }\n  public Run() {\n    Window.obj.Show();\n    return this;\n  }\n}\n\n\n\n\n\nclass FileManager {\n\n  public s2ab(s: string): ArrayBuffer {\n    var buf = new ArrayBuffer(s.length);\n    var view = new Uint8Array(buf);\n    for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n    return buf;\n  }\n\n  public getBlob(app: { base64: string | null, type: string | null }) {\n\n    const mtype: string = app.type || \"application/json\";\n    if (app.base64 != null) {\n      const blob = new Blob([this.s2ab(atob(app.base64))], {\n        type: mtype\n      });\n\n      return blob;\n    }\n  }\n}\n\nclass Http {\n  xml: XMLHttpRequest;\n  body: string | FormData | null;\n\n  constructor(param: { method: string, url: string, body: string | null | FormData | { [index: string]: string }, header: { [index: string]: string } }) {\n    let { method = 'GET', url = '', body = null, header = {} } = param;\n    this.body = null;\n    this.xml = new XMLHttpRequest();\n    this.xml.open(method, url, true);\n    if (typeof (header) == 'object') {\n      if (body instanceof FormData) {\n        // this is a file\n        //header[\"Content-Type\"] = \"multipart/form-data\";\n        delete header[\"Content-Type\"];\n      }\n      else if (typeof (body) === \"object\") {\n        header[\"Content-Type\"] = \"application/json\";\n        body = JSON.stringify(body);\n      }\n      for (const key in header) {\n        this.xml.setRequestHeader(key, header[key]);\n      }\n    }\n    if (typeof (body) == 'string') {\n      this.body = body;\n    }\n  }\n  public async Load<T>(): Promise<T> {\n    this.xml.send(this.body);\n    const promise = new Promise<T>((resolve, reject) => {\n      this.xml.addEventListener('load', function () {\n        resolve(this.response);\n      });\n      this.xml.addEventListener('error', function () {\n        resolve((null as T));\n      });\n    });\n    return await promise;\n  }\n\n  public Then(fn: (response: any) => void): void {\n    this.xml.addEventListener('load', (e) => {\n      fn(this.xml.response);\n    });\n  }\n\n  public Progress(fn: Function): void {\n    if (typeof (fn) == 'function') {\n      this.xml.addEventListener('progress', (e) => {\n        fn(e);\n      });\n    }\n  }\n  public UploadProgress(fn: Function): void {\n    if (typeof (fn) == 'function') {\n      this.xml.upload.addEventListener('progress', (e) => {\n        fn(e);\n      });\n    }\n  }\n}\n\n\nclass DateCore {\n  names: { [index: number]: string }\n\n  constructor() {\n\n    this.names = {\n      0: \"Sunday\",\n      1: \"Monday\",\n      2: \"Tuesday\",\n      3: \"Wednesday\",\n      4: \"Thursday\",\n      5: \"Friday\",\n      6: \"Saturday\"\n    };\n\n  }\n\n  public DateCheck(frm: string, t: string): [boolean, number, string[]] {\n    var from_d = frm;\n    var to_d = t;\n\n    const b: [boolean, number, string[]] = [false, 0, []];\n\n    if (from_d == '' || to_d == '') {\n      return b;\n    }\n\n    b[0] = true;\n\n    var f = new Date(from_d);\n    var e = new Date(to_d);\n    var i = 0;\n    while (f <= e) {\n      var m = (f.getMonth() + 1) < 10 ? '0' + (f.getMonth() + 1) : (f.getMonth() + 1);\n      var day = f.getDate() < 10 ? '0' + f.getDate() : f.getDate();\n\n      var d = f.getFullYear().toString() + \"-\" + m + \"-\" + day;\n      b[2].push(d);\n      var ndate = f.setDate(f.getDate() + 1);\n      f = new Date(ndate);\n      i++;\n    }\n    b[1] = i;\n\n    return b;\n  }\n\n  GetDay(date_str: string) {\n    return this.names[new Date(date_str).getDay()];\n  }\n}\n\n\n\n\n//   class IDB {\n//     constructor(db = null, tbl = null, version = 1) {\n\n//       const dbName = db == null ? \"db\" : db;\n//       const table = tbl == null ? \"table\": tbl;\n//       const dbVersion = version; // Versioning is required for schema updates.\n\n//       const request = indexedDB.open(dbName, dbVersion);\n\n//       request.onupgradeneeded = function (event) {\n//         const db = event.target.result;\n//         // Create an object store named 'users' with 'id' as the keyPath\n//         if (!db.objectStoreNames.contains(table)) {\n//           db.createObjectStore(table, { keyPath: \"id\" });\n//         }\n//       };\n\n//       request.onsuccess = function (event) {\n//         const db = event.target.result;\n//       };\n\n//       request.onerror = function (event) {\n//         console.error(\"Error opening database:\", event.target.errorCode);\n//       };\n\n//       this.dbname = dbName;\n//       this.version = dbVersion;\n//       this.table = table;\n//     }\n\n//     async add(data_obj) {\n//       const request = indexedDB.open(this.dbname, this.version);\n\n//       const promise = new Promise((resolve, reject) => {\n//         request.onsuccess = (event) => { // Use an arrow function here\n//           const db = event.target.result;\n//           const transaction = db.transaction(this.table, \"readwrite\");\n//           const objectStore = transaction.objectStore(this.table);\n\n//           const request = objectStore.add(data_obj);\n\n//           request.onsuccess = () => { // Use an arrow function here\n//             // Fixed to use data_obj instead of user\n//             resolve(true);\n//           };\n\n//           request.onerror = (event) => { // Use an arrow function here\n//             resolve(null);\n//           };\n//         };\n//       });\n//       return promise;\n//     }\n\n//     async update(id, data_obj) {\n//       const request = indexedDB.open(this.dbname, this.version);\n//       const promise = new Promise((resolve, reject) => {\n//         request.onsuccess = (event) => {\n//           const db = event.target.result;\n//           const transaction = db.transaction(this.table, \"readwrite\");\n//           const objectStore = transaction.objectStore(this.table);\n\n//           const getrequest = objectStore.get(id);\n\n//           getrequest.onsuccess = (event) => {\n//             const old_data = event.target.result;\n//             const updateRequest = objectStore.put({ ...old_data, ...data_obj });\n\n//             updateRequest.onsuccess = () => {\n//               resolve(true);\n//             };\n\n//             updateRequest.onerror = (event) => {\n//               resolve(null);\n//             };\n//           };\n\n//           getrequest.onerror = (event) => {\n//             resolve(null);\n//           };\n//         };\n\n//         request.onerror = (event) => {\n//           resolve(null);\n//         };\n//       });\n//       return promise;\n//     }\n\n//     async get(id) {\n//       const request = indexedDB.open(this.dbname, this.version);\n\n//       const promise = new Promise((resolve, reject) => {\n\n//         request.onsuccess = (event) => {\n//           const db = event.target.result;\n//           const transaction = db.transaction(this.table, \"readonly\");\n//           const objectStore = transaction.objectStore(this.table);\n\n//           const getrequest = objectStore.get(id);\n\n//           getrequest.onsuccess = (event) => {\n//             const data = event.target.result;\n//             resolve(data);\n//           };\n\n//           getrequest.onerror = (event) => {\n//             resolve(null);\n//           };\n//         };\n\n//         request.onerror = (event) => {\n//           resolve(null);\n//         };\n//       });\n\n//       return promise;\n//     }\n\n//     async getAll() {\n//       const request = indexedDB.open(this.dbname, this.version);\n\n//       const promise = new Promise((resolve, reject) => {\n\n//         request.onsuccess = (event) => {\n//           const db = event.target.result;\n//           const transaction = db.transaction(this.table, \"readonly\");\n//           const objectStore = transaction.objectStore(this.table);\n\n//           const getAllRequest = objectStore.getAll();\n\n//           getAllRequest.onsuccess = (event) => {\n//             const data = event.target.result;\n//             resolve(data);\n//           };\n\n//           getAllRequest.onerror = (event) => {\n//             resolve(null);\n//           };\n//         };\n\n//         request.onerror = (event) => {\n//           resolve(null);\n//         };\n\n//       });\n\n//       return promise;\n\n//     }\n\n//     async delete(id) {\n//       const request = indexedDB.open(this.dbname, this.version);\n//       const promise = new Promise((resolve, reject) => {\n//         request.onsuccess = (event) => {\n//             const db = event.target.result;\n//             const transaction = db.transaction(this.table, \"readwrite\");\n//             const objectStore = transaction.objectStore(this.table);\n\n//             const deleteRequest = objectStore.delete(id);\n\n//             deleteRequest.onsuccess = () => {\n//                 resolve(true);\n//             };\n\n//             deleteRequest.onerror = (event) => {\n//                 resolve(null);\n//             };\n//         };\n\n//         request.onerror = (event) => {\n//             resolve(null);\n//         };\n//       });\n//     return promise;\n//   }\n\n//   async deleteAll() {\n//     const request = indexedDB.open(this.dbname, this.version);\n\n//     const promise = new Promise((resolve, reject) => {\n\n//       request.onsuccess = (event) => {\n//           const db = event.target.result;\n//           const transaction = db.transaction(this.table, \"readwrite\");\n//           const objectStore = transaction.objectStore(this.table);\n\n//           const clearRequest = objectStore.clear();\n\n//           clearRequest.onsuccess = () => {\n//               resolve(true);\n//           };\n\n//           clearRequest.onerror = (event) => {\n//             resolve(null);\n//           };\n//       };\n\n//       request.onerror = (event) => {\n//           resolve(null);\n//       };\n//     });\n//     return promise;\n//   }\n\n\n// }\n\n\nexport { DateCore }\nexport { Widget };\nexport {\n  html, head, body, title, base, link, meta, style, script, noscript, template,\n  section, nav, article, aside, h1, h2, h3, h4, h5, h6, header, footer, address,\n  p, hr, pre, blockquote, ol, ul, li, dl, dt, dd, figure, figcaption, main, div,\n  a, em, strong, small, s, cite, q, dfn, abbr, ruby, rt, rp, b, i, u, mark, bdi,\n  bdo, span, br, wbr, ins, del, img, iframe, embed, param, video, audio,\n  source, track, canvas, map, area, svg, math, table, caption, colgroup, col,\n  tbody, thead, tfoot, tr, td, th, form, label, input, button, select, datalist,\n  optgroup, option, textarea, fieldset, legend, progress, meter, output, details,\n  summary, dialog, center\n};\nexport {\n  Window,\n  Http,\n  FileManager\n};", "import { a, button, div, li, span, ul, Widget } from \"./core.mts\";\n\nenum Color {\n  Default = 'default',\n  Primary = 'primary',\n  Secondary = 'secondary',\n  Success = 'success',\n  Info = 'info',\n  Warning = 'warning',\n  Danger = 'danger',\n  Link = 'link',\n  Dark = 'dark',\n  Light = 'light',\n  Muted = 'Muted',\n  White = 'white'\n}\n\nenum Size {\n  Lg = \"lg\",\n  Sm = \"sm\",\n  Xs = \"xs\"\n}\n\nclass Text extends div {\n  constructor(option: {text: string, textColor?: Color, textOverflow?: boolean, width?: number } | (string|number)) {\n    super();\n    if (typeof(option) == 'object') {\n      const {text, textColor, textOverflow, width} = option;\n      super.Text(text);\n\n      if (textColor != undefined) {\n        super.AddClass(`text-${textColor}`);\n      }\n\n      super.AddStyle({display: 'inline-block'});\n\n      if (textOverflow != undefined && textOverflow) {\n        super.AddStyle({\n          whiteSpace: 'nowrap',\n          overflow: 'hidden',\n          textOverflow: 'ellipsis'\n        });\n\n      }\n\n      if (width != undefined) {\n        super.AddStyle({\n          width: `${width}px`\n        });\n      }\n    } else if (typeof(option) == 'string') {\n      super.Text(option);\n    } else if (typeof(option) == 'number') {\n      super.Text(option.toString());\n    }\n    \n  }\n}\n\nclass Html extends span {\n  constructor(option: {text: string, textColor?: Color}|string) {\n    super();\n    if (typeof(option) == 'object') {\n      const {text, textColor} = option;\n      super.Html(text);\n      if (textColor != undefined) {\n        super.AddClass(`text-${textColor}`);\n      }\n    } else if (typeof(option) == 'string') {\n      super.Html(option);\n    }\n  \n  }\n}\n\nclass Badge extends span {\n  constructor(o: {\n    text: string | Widget\n  }) {\n    super();\n    super.AddClass(\"badge\");\n    if (o.text != undefined) {\n\n      if (typeof(o.text) == \"string\") {\n        super.Add(new Text({text: o.text}));\n      } else {\n        super.Add(o.text);\n      }\n    }\n\n  }\n}\n\n\nclass Button extends button {\n  constructor(o : {  \n    text: Widget | string,\n    color?: Color,\n    size?: Size,\n    block?: boolean\n  }) {\n    super();\n\n    if (o.color != undefined) {\n      super.AddClass([\"btn\", \"btn-\" + o.color]);\n    }\n\n    if (o.size != undefined) {\n      super.AddClass([\"btn-\" + o.size]);\n    }\n\n    if (typeof(o.text) == \"string\") {\n      super.Add(new Html({text: o.text}));\n    } else {\n      super.Add(o.text);\n    }\n\n    if (o.block != undefined && o.block) {\n      super.AddClass(\"btn-block\");\n    }\n\n  }\n\n  enable(ok: boolean) {\n    super.DeleteClass([\"active\", \"disabled\"]);\n    if (ok) {\n      super.AddClass(\"active\");\n    } else {\n      super.AddClass(\"disabled\");\n    }\n  }\n  \n}\n\nclass ProgressBar extends div {\n  bar: div;\n  constructor(o: {\n    color?: Color,\n    striped?: boolean,\n    animation?: boolean\n  }) {\n    super();\n\n    // <div class=\"progress\">\n//   <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\"\n//   aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:70%\">\n//     <span class=\"sr-only\">70% Complete</span>\n//   </div>\n// </div>\n\n    super.AddClass(\"progress\");\n\n    this.bar = new div().AddClass(\"progress-bar\");\n    \n    this.bar.AddAttr({\n      role: \"progressbar\",\n      \"aria-valuenow\": \"0\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n    });\n\n    this.bar.AddStyle({\n      width: \"0%\"\n    });;\n\n    super.Add(this.bar);\n\n    if (o.color != undefined) {\n      this.bar.AddClass(`progress-bar-${o.color}`);\n    }\n\n    if (o.striped != undefined && o.striped) {\n      this.bar.AddClass([`progress-bar-striped`]);\n    }\n    if (o.animation != undefined && o.animation) {\n      this.bar.AddClass(\"active\");\n    }\n  }\n\n  update(percent: number, showText: boolean = false) {\n    this.bar.AddStyle(`${percent}%`);\n    this.bar.AddAttr({\n      \"aria-valuenow\": `${percent}`,\n    });\n    this.bar.AddStyle({\n      width: `${percent}%`\n    });\n\n    if (showText) {\n      this.bar.Clear();\n      this.bar.Add(new Text(`${percent}%`));\n    }\n  }\n\n}\n\nclass Pagination extends ul {\n  constructor(o: {\n    size?: Size\n  }) {\n    super();\n    super.AddClass(\"pagination\");\n  \n    if (o.size != undefined) {\n      super.AddClass(`pagination-${o.size}`);\n    }\n  }\n  addItem(num: number, fn?: (n: number) => void) {\n\n    const aa = new a();\n\n    super.Add(new li().Add(aa));\n    aa.AddAttr({href: \"#\"});\n    aa.Add(new Text(`${num}`));\n\n    if ( fn != undefined )\n    aa.AddEventListener(\"click\", () => {\n      fn(num);\n    });\n\n    return this;\n  }\n}\n\nexport {\n  Color,\n  Size\n};\n\nexport {\n  Button,\n  Html,\n  Badge,\n  ProgressBar,\n  Pagination\n};", "import { Button, Size, Color, Badge, ProgressBar, Pagination } from \"./plugin/core/bs.3.mts\";\nimport {div, Window} from \"./plugin/core/core.mjs\";\nimport \"./theme/bootstrap3/css/bootstrap.min.css\";\n\nconst MyApp = new Window();\n\nconst btn = new Button({text: \"\",  color: Color.Danger});\nconst prog = new ProgressBar({color: Color.Success, striped: true, animation: true});\nlet p = 0;\nlet i = setInterval(() => {\n  if (p == 100) {\n    clearInterval(i);\n  }\n  prog.update(p, true);\n  p++;\n}, 100);\nbtn.Add(new Badge({text: \"sample\"}));\n\nconst pagination = new Pagination({\n  size: Size.Xs\n});\npagination.addItem(1, (i) => {\n  console.log(i);\n});\npagination.addItem(2);\npagination.addItem(3);\npagination.addItem(4);\n\nMyApp.Navigate(new div().Add([\n  btn,\n  prog,\n  pagination\n]));\n\nMyApp.Run();\n\nexport default MyApp;\n\n\n"],
  "mappings": "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",
  "names": ["Widget", "_Widget", "element", "__publicField", "className", "clist", "item", "styles", "value", "cs", "name", "attrs", "key", "v", "text", "htmlEntities", "match", "html", "widget", "evt", "fn", "ul", "Widget", "li", "div", "Widget", "a", "span", "Widget", "button", "Widget", "_Window", "Widget", "param", "obj", "__publicField", "Window", "Text", "div", "option", "text", "textColor", "textOverflow", "width", "Html", "span", "Badge", "o", "Button", "button", "ok", "ProgressBar", "__publicField", "percent", "showText", "Pagination", "ul", "num", "fn", "aa", "a", "li", "MyApp", "Window", "btn", "Button", "prog", "ProgressBar", "p", "i", "Badge", "pagination", "Pagination", "div", "main_default"]
}
