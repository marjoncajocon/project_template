package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"web/db"
)

/* sample middleware */
func PrintLog(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Printf("Request Method: %s, Request URL: %s\n", r.Method, r.URL)
		next.ServeHTTP(w, r)
	})
}

func main() {

	fs := http.FileServer(http.Dir("./app/build"))

	mux := http.NewServeMux()

	mux.Handle("/", fs)

	mux.HandleFunc("/hellow", func(rw http.ResponseWriter, r *http.Request) {

		func() {

			con := db.GetConnection()

			rows, err := con.Query("select fund_json from check_lists limit 1")

			if err == nil {
				defer rows.Close()
				for rows.Next() {
					var fund string
					rows.Scan(&fund)
					fmt.Println(fund)
				}
			}

		}()

		// fmt.Println(r.Method)
		// fmt.Println(r.Body)

		rw.Write([]byte("Hello World"))
	})

	mux.HandleFunc("/api/test", func(rw http.ResponseWriter, r *http.Request) {
		rw.Header().Add("Content-Type", "application/json")
		rw.Header().Add("Access-Control-Allow-Origin", "*")

		if r.Method == "POST" {

			/*set max body of the bytes*/
			r.Body = http.MaxBytesReader(rw, r.Body, 10)
			/* end set max body size */

			/* parse url query string */
			q := r.URL.Query()
			q.Get("url")
			/* end parse query string */

	
			/* urlencoded  */
			r.ParseForm()
			r.FormValue("name")
			r.FormValue("email")
			/* end for urlEncoded */

			/*parse file upload*/
			r.ParseMultipartForm(10 << 20) // 10MB
			file, header, err := r.FormFile("uploadedFile")
			if err != nil {
					return
			}
			_ = header.Filename
			defer file.Close()
			/* end parse file */




			/* for parsing json*/
			payload := struct {
				Username string `json:"username"`
				Password string `json:"password"`
			}{}
			json.NewDecoder(r.Body).Decode(&payload)
			/* end parsing json */

			auth := r.Header.Get("X-Auth")
			fmt.Println(auth)
			fmt.Println(payload)
		}

	})

	log.Fatal(http.ListenAndServe(":8000", PrintLog(mux)))
}
